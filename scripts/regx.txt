.*(<ca.mcgill.sable.soot.jimple.JasminClass$17: void caseShlExpr(ca.mcgill.sable.soot.jimple.ShlExpr)>|<java.util.Locale: java.lang.String toString()><ca.mcgill.sable.soot.grimp.GAssignStmt: void <init>(ca.mcgill.sable.soot.jimple.Value,ca.mcgill.sable.soot.jimple.Value)>).*<ca.mcgill.sable.soot.jimple.JasminClass$23: void defaultCase(ca.mcgill.sable.soot.Type)>
(<ca.mcgill.sable.soot.jimple.SparseLocalDefs$LocalStmtPair: int hashCode()>|<ca.mcgill.sable.util.TypedLinkedList$TypedLinkedListIterator: void set(java.lang.Object)>).*<ca.mcgill.sable.soot.jimple.JasminClass$16: void caseRefType(ca.mcgill.sable.soot.RefType)>
.*(<ca.mcgill.sable.soot.TypeSwitch: void caseByteType(ca.mcgill.sable.soot.ByteType)>|<ca.mcgill.sable.soot.StmtAddressType: void <init>()><ca.mcgill.sable.soot.jimple.Jimple: void <init>()>).*<ca.mcgill.sable.soot.jimple.JGotoStmt: java.lang.String toString(boolean,ca.mcgill.sable.util.Map,java.lang.String)>
.*(<ca.mcgill.sable.util.LinkedList: java.lang.Object getFirst()>|<ca.mcgill.sable.soot.jimple.JLookupSwitchStmt: void apply(ca.mcgill.sable.util.Switch)><ca.mcgill.sable.util.SplayTreeMap: java.lang.Object clone()>).*<ca.mcgill.sable.soot.jimple.JasminClass$17: void caseNegExpr(ca.mcgill.sable.soot.jimple.NegExpr)>
.*(<ca.mcgill.sable.soot.DoubleType: void apply(ca.mcgill.sable.util.Switch)>|<ca.mcgill.sable.soot.jimple.JasminClass$19: void <init>(ca.mcgill.sable.soot.jimple.JasminClass)><ca.mcgill.sable.soot.coffi.BasicBlock: java.lang.String toString()>).*<ca.mcgill.sable.soot.coffi.Instruction_Lstore_1: void <init>()>
.*(<ca.mcgill.sable.util.Collections$UnmodList: boolean remove(java.lang.Object)>|<ca.mcgill.sable.util.TypedSplayTreeMap$EntryCollection: ca.mcgill.sable.util.Iterator iterator()><ca.mcgill.sable.soot.jimple.JasminClass$17: void caseShlExpr(ca.mcgill.sable.soot.jimple.ShlExpr)>).*<ca.mcgill.sable.soot.ShortType: boolean equals(java.lang.Object)>
(<ca.mcgill.sable.util.TypedSplayTreeMap: void <init>(ca.mcgill.sable.util.Map,ca.mcgill.sable.util.Comparator,ca.mcgill.sable.util.Cast,ca.mcgill.sable.util.Cast)>|<java.util.BitSet: void <clinit>()>).*<ca.mcgill.sable.soot.jimple.AbstractNonStaticInvokeExpr: void <init>()>
.*(<ca.mcgill.sable.soot.jimple.ArraySparseSet: void add(java.lang.Object)>|<ca.mcgill.sable.soot.jimple.JasminClass$3: void caseArrayType(ca.mcgill.sable.soot.ArrayType)><ca.mcgill.sable.soot.grimp.Grimp: ca.mcgill.sable.soot.jimple.GeExpr newGeExpr(ca.mcgill.sable.soot.jimple.Value,ca.mcgill.sable.soot.jimple.Value)>).*<ca.mcgill.sable.util.ArraySet: java.lang.Object[] access$1(ca.mcgill.sable.util.ArraySet)>
.*(<ca.mcgill.sable.soot.jimple.ClassHierarchy$ToInt: ca.mcgill.sable.soot.Type toInt(ca.mcgill.sable.soot.Type)>|<ca.mcgill.sable.soot.jimple.JasminClass$16: void defaultCase(ca.mcgill.sable.soot.Type)><ca.mcgill.sable.soot.jimple.JasminClass$8: void caseShortType(ca.mcgill.sable.soot.ShortType)>).*<ca.mcgill.sable.soot.coffi.Instruction_Fload: void <init>()>
.*(<ca.mcgill.sable.util.SplayTreeMap$EntryCollection: int size()>|<ca.mcgill.sable.soot.jimple.Jimple: void <clinit>()><ca.mcgill.sable.soot.coffi.FutureStmt: ca.mcgill.sable.util.List getDefBoxes()>).*<ca.mcgill.sable.util.Collections$UnmodIterator: void remove()>
