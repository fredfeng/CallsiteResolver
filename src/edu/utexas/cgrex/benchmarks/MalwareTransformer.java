package edu.utexas.cgrex.benchmarks;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

import soot.Scene;
import soot.SceneTransformer;
import soot.jimple.spark.builder.ContextInsensitiveBuilder;
import soot.jimple.spark.pag.PAG;
import soot.jimple.spark.solver.PropWorklist;
import soot.jimple.toolkits.callgraph.CallGraphBuilder;
import soot.options.SparkOptions;
import edu.utexas.cgrex.QueryManager;
import edu.utexas.cgrex.utils.StringUtil;
import edu.utexas.spark.ondemand.DemandCSPointsTo;

/**
 * Transformer for anlalyzing Android Malware integrated with STAMP.
 * 
 * @author yufeng
 * 
 */
public class MalwareTransformer extends SceneTransformer {

	public boolean debug = true;

	// QueryManager.
	QueryManager qm;
	
	String entryPoint = "<edu.stanford.stamp.harness.Main: void main(java.lang.String[])>";
	String dangerMeths = "<android.content.BroadcastReceiver: void abortBroadcast()>";

	protected void internalTransform(String phaseName,
			@SuppressWarnings("rawtypes") Map options) {
		// TODO Auto-generated method stub
		StringUtil.reportInfo("Malware Transformer----------");
		/* BEGIN: CHA-based demand-driven CALL graph */
		long startCHA = System.nanoTime();
		HashMap<String, String> opt = new HashMap<String, String>(options);
		opt.put("enabled", "true");
		opt.put("verbose", "true");
		opt.put("field-based", "false");
		opt.put("on-fly-cg", "false");
		opt.put("set-impl", "double");
		opt.put("double-set-old", "hybrid");
		opt.put("double-set-new", "hybrid");

		SparkOptions opts = new SparkOptions(opt);

		// Build pointer assignment graph
		ContextInsensitiveBuilder b = new ContextInsensitiveBuilder();

		final PAG pag = b.setup(opts);
		b.build();

		// Build type masks
		pag.getTypeManager().makeTypeMask();

		long endCHA = System.nanoTime();
		/* END: CHA-based demand-driven CALL graph */

		// Propagate
		new PropWorklist(pag).propagate();

		if (!opts.on_fly_cg() || opts.vta()) {
			CallGraphBuilder cgb = new CallGraphBuilder(pag);
			cgb.build();
		}
		StringUtil.reportSec("Building CHA call graph", startCHA, endCHA);

		Scene.v().setPointsToAnalysis(pag);

		final int DEFAULT_MAX_PASSES = 10;
		final int DEFAULT_MAX_TRAVERSAL = 75000;
		final boolean DEFAULT_LAZY = false;

		DemandCSPointsTo ptsEager = DemandCSPointsTo.makeWithBudget(
				DEFAULT_MAX_TRAVERSAL, DEFAULT_MAX_PASSES, DEFAULT_LAZY);
		ptsEager.enableEarlyStop();
		ptsEager.disableBudget();

		DemandCSPointsTo ptsDd = DemandCSPointsTo.makeWithBudget(
				DEFAULT_MAX_TRAVERSAL, DEFAULT_MAX_PASSES, DEFAULT_LAZY);
		ptsDd.enableEarlyStop();
		ptsDd.disableBudget();
		
		qm = new QueryManager(null, Scene.v().getCallGraph(), true, ptsEager,
				ptsDd);

		runByintervals();
	}

	private void runByintervals() {

		// process the line.
		String query = entryPoint + ".*" + dangerMeths;
		String regx = qm.getValidExprBySig(query);
		StringUtil.reportInfo("Query malware------" + regx);;

		// early stop
		long startEa = System.nanoTime();
		boolean res1 = qm.queryRegxEager(regx);
		long endEa = System.nanoTime();
		StringUtil.reportSec("Query Eagerly: ", startEa, endEa);

		// regular
		long startDd = System.nanoTime();
		boolean res2 = qm.queryRegx(regx);
		long endDd = System.nanoTime();
		StringUtil.reportSec("Query on-demand: ", startDd, endDd);

		assert (res1 == res2);

		System.exit(0);
	}
}
