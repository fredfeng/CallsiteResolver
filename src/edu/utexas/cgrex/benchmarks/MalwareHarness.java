package edu.utexas.cgrex.benchmarks;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.xmlpull.v1.XmlPullParserException;

import soot.CompilationDeathException;
import soot.Scene;
import soot.SootMethod;
import edu.utexas.cgrex.QueryManager;
import edu.utexas.cgrex.android.SetupApplication;

/**
 * The harness for sensitive APIs in Android.
 * @author yufeng
 *
 */
public class MalwareHarness {

	public static int benchmarkSize = 10;
	
	//we will collect the running time at each interval.
	public static int interval = 5;

	// 0: interactive mode; 1: benchmark mode
	public static int mode = 1;
	
	public static final Set<String> permissionAPIs = new HashSet<String>();
	
	public static final Set<String> apks = new HashSet<String>();
	
	public static final String sdk = "/home/yufeng/research/others/android-platforms/";
	
	public static final String defaultLoc = "/home/yufeng/research/benchmarks/malware/";

	public static final String apiMapping = "scripts/jellybean_mapping.txt";

	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException,
			CompilationDeathException {
		//recursively get all the apk files.
		findFiles(new File(defaultLoc));
		File fin = new File(apiMapping);
		FileInputStream fis = new FileInputStream(fin);
		// Construct BufferedReader from InputStreamReader
		BufferedReader br = new BufferedReader(new InputStreamReader(fis));

		String line = null;
		while ((line = br.readLine()) != null) {
			int endIdx = line.indexOf(">");
			permissionAPIs.add(line.substring(0, endIdx + 1));
		}
		br.close();
		
		for(String apk : apks)
			runAnalysis(apk, sdk);
	}
	
	public static void findFiles(File root)
	{
	    File[] files = root.listFiles(); 
	    for (File file : files) {
	        if (file.isFile() && file.getName().endsWith(".apk")) {
	        	apks.add(file.getAbsolutePath());
	        } else if (file.isDirectory()) {
	            findFiles(file);
	        }
	    }
	}

	private static void runAnalysis(final String fileName,
			final String androidJar) {
		try {

			final SetupApplication app = new SetupApplication(androidJar,
					fileName);

			app.calculateEntryPoints();
			app.printEntrypoints();
			SootMethod main = Scene.v().getMethod(
					"<dummyMainClass: void dummyMainMethod()>");
			List<SootMethod> entries = new LinkedList<SootMethod>();
			entries.add(main);
			Scene.v().setEntryPoints(entries);
			QueryManager qm = new QueryManager(Scene.v().getCallGraph(), main);

			int totalFalse = 0;
			int total = 0;

			for (String tgt : permissionAPIs) {
				if (!qm.isReachable(tgt))
					continue;

				String regx = "<dummyMainClass: void dummyMainMethod()>.*"
						+ tgt;
				regx = qm.getValidExprBySig(regx);
				regx = regx.replaceAll("\\s+", "");

				System.out.println("Random regx------" + regx);
				boolean res1 = qm.queryRegx(regx);
				total++;
				System.out.println("Query result:" + res1);
				if (!res1) {
					totalFalse++;
					assert false : Scene.v().getMethod(tgt);
				}
			}
			
			System.out.println("total: " + total);
			System.out.println("total false: " + totalFalse);

		} catch (IOException ex) {
			System.err.println("Could not read file: " + ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		} catch (XmlPullParserException ex) {
			System.err.println("Could not read Android manifest file: "
					+ ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
