package edu.utexas.cgrex.benchmarks;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import org.xmlpull.v1.XmlPullParserException;

import soot.CompilationDeathException;
import soot.EntryPoints;
import soot.Scene;
import soot.SootMethod;
import edu.utexas.cgrex.QueryManager;
import edu.utexas.cgrex.android.SetupApplication;

/**
 * The harness for sensitive APIs in Android.
 * @author yufeng
 *
 */
public class MalwareHarness {

	public static int benchmarkSize = 10;
	
	//we will collect the running time at each interval.
	public static int interval = 5;

	// 0: interactive mode; 1: benchmark mode
	public static int mode = 1;
	
	//FIXME: should move those api to a config file later.
	public String[] dangerousAPIs = {"<android.content.BroadcastReceiver: void abortBroadcast()>"};

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String targetLoc = "/home/yufeng/workspace/CgTestSet/malware/00621E015191863041E78726B863B7E1374B17FDA690367878D1272B0E44B232.apk";
		System.out.println("benchmark----------" + targetLoc);
		String sdk = "/home/yufeng/research/others/android-platforms/";
		targetLoc = "/home/yufeng/research/benchmarks/malware/fse/Pjapps/002a775c92338612b6e3fbf00ab157a353e48514.apk";
		try {
			runAnalysis(targetLoc, sdk);
		} catch (CompilationDeathException e) {
			e.printStackTrace();
			if (e.getStatus() != CompilationDeathException.COMPILATION_SUCCEEDED)
				throw e;
			else
				return;
		}

	}

	private static void runAnalysis(final String fileName,
			final String androidJar) {
		try {

			final SetupApplication app = new SetupApplication(androidJar,
					fileName);

			app.calculateEntryPoints();
			app.printEntrypoints();
			SootMethod main = Scene.v().getMethod("<dummyMainClass: void dummyMainMethod()>");
			List<SootMethod> entries = new LinkedList<SootMethod>();
			entries.add(main);
			Scene.v().setEntryPoints(entries);
			QueryManager qm = new QueryManager(Scene.v().getCallGraph(), main);

			String regx = "<dummyMainClass: void dummyMainMethod()>.*<android.content.BroadcastReceiver: void abortBroadcast()>";
			regx = qm.getValidExprBySig(regx);
			regx = regx.replaceAll("\\s+", "");

			System.out.println("Random regx------" + regx);
			boolean res1 = qm.queryRegx(regx);
			System.out.println("Query result:" + res1);

		} catch (IOException ex) {
			System.err.println("Could not read file: " + ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		} catch (XmlPullParserException ex) {
			System.err.println("Could not read Android manifest file: "
					+ ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
