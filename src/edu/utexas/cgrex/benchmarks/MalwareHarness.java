package edu.utexas.cgrex.benchmarks;

import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.xmlpull.v1.XmlPullParserException;

import soot.MethodOrMethodContext;
import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import soot.jimple.toolkits.callgraph.Edge;
import soot.util.queue.QueueReader;
import edu.utexas.cgrex.QueryManager;
import edu.utexas.cgrex.android.SetupApplication;

/**
 * The harness for sensitive APIs in Android.
 * 
 * @author yufeng
 *
 */
public class MalwareHarness {

	public static final Set<String> apks = new HashSet<String>();

	public static final String sdk = "/home/yufeng/research/others/android-platforms/";

	public static final String defaultLoc = "/home/yufeng/research/benchmarks/malware/";
	
	public static final String dummyMain = "<dummyMainClass: void dummyMainMethod()>";

	public static String tmp = "/home/yufeng/research/benchmarks/malware/oopsla15/BeanBot/a1fa9de17c36f00fbbdfffc9bfc3c858b9202f73.apk";

	// We use Beanbot family as the example.
	// 1. onReceive -> abortBroadcast
	// 2. startService -> getDeviceId, SimSerialNumber, getline1Number

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		runAnalysis(tmp, sdk);
	}

	private static void runAnalysis(final String fileName,
			final String androidJar) {
		try {
			System.out.println("Analyzing app:" + fileName);
			SetupApplication app = new SetupApplication(androidJar, fileName);
			app.calculateEntryPoints();
			app.printEntrypoints();
			SootMethod main = Scene.v().getMethod(dummyMain);
			List<SootMethod> entries = new LinkedList<SootMethod>();
			entries.add(main);
			Scene.v().setEntryPoints(entries);
			QueryManager qm = new QueryManager(Scene.v().getCallGraph(), main);
			
			SootClass broadcastReceiver = Scene.v().getSootClass("android.content.BroadcastReceiver");

			QueueReader<MethodOrMethodContext> qe = qm.getReachableMethods().listener();
			SootMethod abort = null, onReceive = null, startService = null;
			Set<SootMethod> services = new HashSet<SootMethod>();
			while (qe.hasNext()) {
				SootMethod meth = (SootMethod) qe.next();
				if (meth.isJavaLibraryMethod())
					continue;

				SootClass clzClass = meth.getDeclaringClass();
				if (meth.getName().equals("onReceive")
						&& clzClass.getSuperclass().equals(broadcastReceiver))
					onReceive = meth;
				
				if(meth.getName().equals("abortBroadcast"))
					abort = meth;
				
				if (meth.getName().equals("onStart")
						&& clzClass.getSuperclass().getName()
								.equals("android.app.Service"))
					services.add(meth);
				
				if(meth.getName().equals("getDeviceId")) {
//					Iterator it = Scene.v().getCallGraph().edgesInto(meth);
//					while(it.hasNext())
//						System.out.println(it.next());
					assert false : meth;
				}

			}
			
			assert false : services;
			String q1 = ".*" + onReceive.getSignature() + ".*" + abort.getSignature();
			String regx = qm.getValidExprBySig(q1);
			regx = regx.replaceAll("\\s+", "");
			boolean res1 = qm.queryRegx(regx);
			
			String q2 = ".*" + onReceive.getSignature() + ".*" + startService.getSignature();
			regx = qm.getValidExprBySig(q2);
			regx = regx.replaceAll("\\s+", "");
			boolean res2 = qm.queryRegx(regx);
			assert false : res2;

		} catch (IOException ex) {
			System.err.println("Could not read file: " + ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		} catch (XmlPullParserException ex) {
			System.err.println("Could not read Android manifest file: "
					+ ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
