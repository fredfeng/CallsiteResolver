package edu.utexas.cgrex.benchmarks;

import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.xmlpull.v1.XmlPullParserException;

import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import edu.utexas.cgrex.QueryManager;
import edu.utexas.cgrex.android.SetupApplication;
import edu.utexas.cgrex.utils.SootUtils;

/**
 * The harness for sensitive APIs in Android.
 * 
 * @author yufeng
 *
 */
public class MalwareHarness {

	public static final Set<String> apks = new HashSet<String>();

	public static  String sdk = "/home/yufeng/research/others/android-platforms";

	public static final String defaultLoc = "/home/yufeng/research/benchmarks/malware/";
	
	public static final String dummyMain = "<dummyMainClass: void dummyMainMethod()>";

	public static String tmp = "/home/yufeng/research/benchmarks/malware/oopsla15/GoldDream/8309269f3f2cba4324346e48bf7474881090617d.apk";
	 
	public static final String device = "<android.telephony.TelephonyManager: java.lang.String getDeviceId()>";
	 
	public static final String sub = "<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>";
	
	public static final String http = "<java.net.HttpURLConnection: void <init>(java.net.URL)>";
	 
	 
	// We use Beanbot family as the example.
	// 1. onReceive -> abortBroadcast
	// 2. startService -> getDeviceId, SimSerialNumber, getline1Number

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		sdk = "/home/yufeng/lib/android-sdk-linux/platforms/android-16/android.jar";
		boolean result = runAnalysis(tmp, sdk);
		System.out.println(tmp + " Belongs to GoldDream?" + result);
	}

	private static boolean runAnalysis(final String fileName,
			final String androidJar) {
		boolean val = false;
		try {
			System.out.println("Analyzing app:" + fileName);
			SetupApplication app = new SetupApplication(androidJar, fileName);
			app.calculateEntryPoints();
			app.printEntrypoints();
			SootMethod main = Scene.v().getMethod(dummyMain);
			List<SootMethod> entries = new LinkedList<SootMethod>();
			entries.add(main);
			Scene.v().setEntryPoints(entries);
			QueryManager qm = new QueryManager(SootUtils.getCha(), main);

			Iterator<SootMethod> mIt = Scene.v().getMethodNumberer().iterator();
			Set<SootMethod> receivers = new HashSet<SootMethod>();
			Set<SootMethod> services = new HashSet<SootMethod>();

			while (mIt.hasNext()) {
				SootMethod mm = mIt.next();
				SootClass cc = mm.getDeclaringClass();
				if (mm.getName().contains("onReceive")
						&& cc.getSuperclass().getName()
								.equals("android.content.BroadcastReceiver")) {
					receivers.add(mm);
				}
				if (mm.getName().contains("startService")) {
					services.add(mm);
				}
			}

			if (Scene.v().containsMethod(http)
					&& Scene.v().containsMethod(device)
					&& Scene.v().containsMethod(sub)) {
				SootMethod deviceMeth = Scene.v().getMethod(device);
				SootMethod subMeth = Scene.v().getMethod(sub);

				String q1 = main.getSignature() + ".*"
						+ deviceMeth.getSignature();
				String regx = qm.getValidExprBySig(q1);
				regx = regx.replaceAll("\\s+", "");
				boolean res1 = qm.querySig(regx);
				if (!res1) {
					System.out.println("Fail on:" + q1);
					return false;
				}

				String q2 = main.getSignature() + ".*" + subMeth.getSignature();
				regx = qm.getValidExprBySig(q2);
				regx = regx.replaceAll("\\s+", "");
				boolean res2 = qm.querySig(regx);
				if (!res2) {
					System.out.println("Fail on:" + q2);
					return false;
				}

				if (receivers.isEmpty() || services.isEmpty()) {
					System.out.println("Fail on no ICC");
					return false;
				}

				for (SootMethod recev : receivers) {
					for (SootMethod serv : services) {
						String q3 = ".*" + recev.getSignature() + ".*"
								+ serv.getSignature();
						regx = qm.getValidExprBySig(q3);
						regx = regx.replaceAll("\\s+", "");
						boolean res3 = qm.querySig(regx);
						if (res3) {
							val = res3;
							break;
						}
					}
					if (val)
						break;
				}

			}
			return val;

		} catch (IOException ex) {
			System.err.println("Could not read file: " + ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		} catch (XmlPullParserException ex) {
			System.err.println("Could not read Android manifest file: "
					+ ex.getMessage());
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
