<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: java.lang.Object getContent()>
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<java.net.URLConnection: java.lang.Object getContent()>
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>
<java.net.URLConnection: java.lang.String getContentEncoding()>
<java.net.URLConnection: java.lang.String getContentType()>
<java.net.URLConnection: int getContentLength()>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.context.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.context.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<java.io.Reader: int read()>
<java.io.Reader: int read(char[])>
<java.io.Reader: int read(java.nio.CharBuffer)>
<java.io.InputStreamReader: int read()>
<java.io.InputStreamReader: int read(char[],int,int)>
<java.io.BufferedReader: int read()>
<java.io.BufferedReader: int read(char[],int,int)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.Writer: java.io.Writer append(char)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>
<java.io.Writer: void write(char[])>
<java.io.Writer: void write(int)>
<java.io.Writer: void write(java.lang.String)>
<java.io.Writer: void write(java.lang.String,int,int)>
<java.io.BufferedWriter: void write(char[],int,int)>
<java.io.BufferedWriter: void write(int)>
<java.io.BufferedWriter: void write(java.lang.String,int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
